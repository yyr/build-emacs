# -*- mode: shell-script; -*-

function run_autogen() {        # run autogen.sh
    ./autogen.sh &> autogen.log
}

function run_configure()
{
    if [ ! -f configure ]; then
        run_autogen
    fi

    echo "Running configure:\n" ./configure --prefix=$PREFIX $BE_CONF_FLAGS --without-compress-info
    ./configure --prefix=$PREFIX $BE_CONF_FLAGS --without-compress-info | tee log.config
}

function run_make()
{
    if [ ! -f Makefile ]; then
        run_configure
    fi
    ${MAKE} | tee log.make
    ${MAKE} GZIP_PROG="" install | tee log.install
}

function build_emacs()
{
    run_configure
    run_make

    . $SCRIPT_DIR/post-build-hook
}

function set_prefix()
{
    rev=$(git rev-parse --short HEAD)
    export PREFIX=${PREFIX:-$HOME/local}/emacs-$rev
}

function git_change_branch()
{
    echo "Checking out $1"
    git checkout $1
}

function git_clean()
{
    echo "Running git clean"
    git clean -xdf &> /dev/null
}

function build_emacs_git_branch()
{
    git_change_branch $1
    git pull origin $1
    git_clean
    set_prefix
    build_emacs
}

function build_emacs_git_head()
{
    # change to master, pull for updates and call build.
    git checkout master
    git pull origin master
    set_prefix
    build_emacs
}

function git_change_to_tag()
{
    git fetch origin --tags
    tag=$1
    if [[ "x$tag" == "xlatest" || "$git_tag" == "" ]]; then
        tag=$(git describe --abbrev=0 --tags)
        git checkout $tag

    elif [[ ! -z $git_tag ]]; then
        git checkout $tag
        if [ ! $? == 0  ]; then
            echo "There is no tag called \"$tag\""
            exit
        fi
    fi
    return
}

function build_emacs_git_tag()
{
    git_change_to_tag $git_tag
    PREFIX=$HOME/local/$tag
    echo "Building from tag: $tag"
    git_clean
    build_emacs
}
